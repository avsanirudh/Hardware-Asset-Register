/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Classes;
import static java.lang.Thread.sleep;
import javax.swing.JOptionPane;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author Anirudh
 */
public class ApproveUser extends javax.swing.JFrame {
Connection con;
Statement stmt;
PreparedStatement pstmt;
ResultSet rs;

    /**
     * Creates new form ApproveUser
     */
    public ApproveUser() {
        initComponents();
        viewtable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainCard = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        SearchUsersBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        t1 = new javax.swing.JTable();
        BackBtn1 = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        UserDetTxt = new javax.swing.JTextField();
        ClockLbl = new javax.swing.JLabel();
        ClockLbl1 = new javax.swing.JLabel();
        HeadingLbl = new javax.swing.JLabel();
        LogOutBtn = new javax.swing.JButton();
        BackBtn2 = new javax.swing.JButton();
        EditBtn = new javax.swing.JButton();
        EditBtn1 = new javax.swing.JButton();
        DeleteUserBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        MainCard.setBackground(new java.awt.Color(51, 51, 51));
        MainCard.setForeground(new java.awt.Color(51, 51, 51));
        MainCard.setLayout(null);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Enter UserName or UserID To Search");
        MainCard.add(jLabel2);
        jLabel2.setBounds(10, 577, 260, 20);

        SearchUsersBtn.setForeground(new java.awt.Color(255, 255, 255));
        SearchUsersBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/search_32px.png"))); // NOI18N
        SearchUsersBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchUsersBtnActionPerformed(evt);
            }
        });
        MainCard.add(SearchUsersBtn);
        SearchUsersBtn.setBounds(250, 600, 40, 40);

        t1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "UserID", "Password", "Name", "UserName", "IsAdmin", "Email ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        t1.setColumnSelectionAllowed(true);
        t1.getTableHeader().setReorderingAllowed(false);
        t1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                t1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(t1);

        MainCard.add(jScrollPane1);
        jScrollPane1.setBounds(20, 50, 900, 470);

        BackBtn1.setBackground(new java.awt.Color(0, 102, 204));
        BackBtn1.setForeground(new java.awt.Color(255, 255, 255));
        BackBtn1.setText("Main Menu");
        BackBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackBtn1ActionPerformed(evt);
            }
        });
        MainCard.add(BackBtn1);
        BackBtn1.setBounds(750, 590, 150, 40);

        jSeparator2.setForeground(new java.awt.Color(255, 255, 255));
        MainCard.add(jSeparator2);
        jSeparator2.setBounds(10, 640, 230, 3);

        UserDetTxt.setBackground(new java.awt.Color(51, 51, 51));
        UserDetTxt.setForeground(new java.awt.Color(255, 255, 255));
        UserDetTxt.setBorder(null);
        UserDetTxt.setCaretColor(new java.awt.Color(255, 255, 255));
        MainCard.add(UserDetTxt);
        UserDetTxt.setBounds(10, 610, 230, 27);

        ClockLbl.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ClockLbl.setForeground(new java.awt.Color(255, 255, 255));
        MainCard.add(ClockLbl);
        ClockLbl.setBounds(0, 0, 0, 0);

        ClockLbl1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ClockLbl1.setForeground(new java.awt.Color(255, 255, 255));
        MainCard.add(ClockLbl1);
        ClockLbl1.setBounds(340, 10, 160, 20);

        HeadingLbl.setFont(new java.awt.Font("Yu Gothic UI Light", 1, 24)); // NOI18N
        HeadingLbl.setForeground(new java.awt.Color(255, 255, 255));
        HeadingLbl.setText("Approve Users");
        MainCard.add(HeadingLbl);
        HeadingLbl.setBounds(20, 10, 160, 32);

        LogOutBtn.setBackground(new java.awt.Color(0, 102, 204));
        LogOutBtn.setForeground(new java.awt.Color(255, 255, 255));
        LogOutBtn.setText("Log Out");
        LogOutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogOutBtnActionPerformed(evt);
            }
        });
        MainCard.add(LogOutBtn);
        LogOutBtn.setBounds(750, 640, 150, 40);

        BackBtn2.setBackground(new java.awt.Color(0, 102, 204));
        BackBtn2.setForeground(new java.awt.Color(255, 255, 255));
        BackBtn2.setText("Admin Main Menu");
        BackBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackBtn2ActionPerformed(evt);
            }
        });
        MainCard.add(BackBtn2);
        BackBtn2.setBounds(750, 540, 150, 40);

        EditBtn.setBackground(new java.awt.Color(0, 102, 204));
        EditBtn.setForeground(new java.awt.Color(255, 255, 255));
        EditBtn.setText("Edit");
        EditBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditBtnActionPerformed(evt);
            }
        });
        MainCard.add(EditBtn);
        EditBtn.setBounds(400, 540, 100, 40);

        EditBtn1.setBackground(new java.awt.Color(0, 102, 204));
        EditBtn1.setForeground(new java.awt.Color(255, 255, 255));
        EditBtn1.setText("Refresh");
        EditBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditBtn1ActionPerformed(evt);
            }
        });
        MainCard.add(EditBtn1);
        EditBtn1.setBounds(460, 610, 100, 40);

        DeleteUserBtn.setBackground(new java.awt.Color(0, 102, 204));
        DeleteUserBtn.setForeground(new java.awt.Color(255, 255, 255));
        DeleteUserBtn.setText("Delete");
        DeleteUserBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteUserBtnActionPerformed(evt);
            }
        });
        DeleteUserBtn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                DeleteUserBtnKeyPressed(evt);
            }
        });
        MainCard.add(DeleteUserBtn);
        DeleteUserBtn.setBounds(520, 540, 100, 40);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(MainCard, javax.swing.GroupLayout.PREFERRED_SIZE, 940, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainCard, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void SearchUsersBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchUsersBtnActionPerformed
        // TODO add your handling code here:
        if(UserDetTxt.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null, "Enter User Name or User ID");
        }
        else
        FindUser();
    }//GEN-LAST:event_SearchUsersBtnActionPerformed

    private void t1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_t1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_t1MouseClicked

    private void LogOutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogOutBtnActionPerformed
        // TODO add your handling code here:
        logout();
    }//GEN-LAST:event_LogOutBtnActionPerformed

    private void BackBtn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackBtn2ActionPerformed
        // TODO add your handling code here:
        new AdminMainMenu().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_BackBtn2ActionPerformed

    private void BackBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackBtn1ActionPerformed
        // TODO add your handling code here:
        new MainMenu().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_BackBtn1ActionPerformed

    private void EditBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditBtnActionPerformed
        // TODO add your handling code here:
        String approved = getapproved();
        String userdet = Usergetdet();
        String active = "Yes";
        int IsAdmin = getIsAdmin();
        EditUser eu = new EditUser();
        eu.setVisible(true);
        eu.getdet(userdet, IsAdmin, approved, active);
    }//GEN-LAST:event_EditBtnActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        logout();
    }//GEN-LAST:event_formWindowClosing

    private void EditBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditBtn1ActionPerformed
        // TODO add your handling code here:
        viewtable();
    }//GEN-LAST:event_EditBtn1ActionPerformed

    private void DeleteUserBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteUserBtnActionPerformed
        // TODO add your handling code here:
        if(t1.getSelectionModel().isSelectionEmpty())
        {
            JOptionPane.showMessageDialog(null, "Select a user");
        }
        else
        deleteuser();
    }//GEN-LAST:event_DeleteUserBtnActionPerformed

    private void DeleteUserBtnKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_DeleteUserBtnKeyPressed
        // TODO add your handling code here:
        deleteuser();
    }//GEN-LAST:event_DeleteUserBtnKeyPressed

    public String Usergetdet()
    {
        int row = t1.getSelectedRow();
        String userdet = t1.getValueAt(row, 2).toString();
        System.out.println("userdet = " + userdet);
        return userdet;
    }
    
    public int getIsAdmin()
    {
        int row = t1.getSelectedRow();
        String IsAdmin = t1.getValueAt(row,3).toString();
        System.out.println("IsAdmin = " + IsAdmin);
        int t = 1, f = 0;
        if(IsAdmin.equals("True"))
        {
            return t;             
        }
        else
        return f;
        
    }
    
    public void clock()
    {
        Thread clock = new Thread()
        {
            public void run()
            {
                try 
                {
                    for(;;)
                    {
                        SimpleDateFormat sdf = new SimpleDateFormat("dd/mm/yyyy HH:mm:ss");
                        java.util.Date date = new java.util.Date();
                        ClockLbl.setText(sdf.format(date)); 
                        sleep(1000);
                    }
                }
                catch (InterruptedException ex) 
                {
                    System.out.println(ex.getMessage());
                }
            }
        
        };
        clock.start();
    }
    public void viewtable()
    {
        try
        {
            con = new DesignHome().dbconn();
            String query = "Select * from users where Activated = 'False'";
            stmt = con.createStatement();
            rs = stmt.executeQuery(query);
            t1.setModel(DbUtils.resultSetToTableModel(rs));
        }
        catch(SQLException e)
        {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    
    public String getapproved()
    {
        int row = t1.getSelectedRow();
        String approved = t1.getValueAt(row, 5).toString();
        System.out.println("Approved = " + approved);
        return approved;
    }
    
    public void deleteuser()
    {
    int row = t1.getSelectedRow();
    String userdetails = t1.getValueAt(row, 0).toString();

        try
        {
            Pattern patt1 = Pattern.compile("[^a-z0-9]",Pattern.CASE_INSENSITIVE);//for assetdet
                Matcher Massetdet = patt1.matcher(userdetails);
                Boolean b = Massetdet.find();
                
                
                if(b)
                {
                    JOptionPane.showMessageDialog(null, "User Name or ID can't contain special characters");
                }
            else
                {
                    System.out.println("Establishing Connection");
                    con = new DesignHome().dbconn();
                    con.setAutoCommit(false);
                    System.out.println("Connection Established");

                    stmt = con.createStatement();
                    String query = "Delete from users where username = '" + userdetails + "' or id = '" + userdetails + "'";

                    int response = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete the selected user?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

                    if(response == JOptionPane.YES_OPTION)
                    {
                        stmt.executeUpdate(query);
                        con.commit();
                        JOptionPane.showMessageDialog(null, "User deleted successfully!");                        
                    }

                    else if(response == JOptionPane.NO_OPTION)
                    {
                        JOptionPane.showMessageDialog(null, "Action Cancelled");
                    }

                    String query1 = "select * from users where activated = 'false'";
                    rs = stmt.executeQuery(query1);
                    t1.setModel(DbUtils.resultSetToTableModel(rs));

                    try
                    {
                        stmt.close();
                        con.close();
                        rs.close();
                    }
                    catch(SQLException e)
                    {
                        JOptionPane.showMessageDialog(null, e.getMessage());
                    }   
                }
        }
        catch(SQLException e)
        {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    
    private void FindUser()
    
    {
        {
            String userdetails = UserDetTxt.getText();
            
            try
            {
                Pattern patt1 = Pattern.compile("[^a-z0-9]",Pattern.CASE_INSENSITIVE);//for assetdet
                Matcher Massetdet = patt1.matcher(userdetails);
                Boolean b = Massetdet.find();
                
                
                if(b)
                {
                    JOptionPane.showMessageDialog(null, "User Name or ID can't contain special characters");
                }
                
                else
                {
                    System.out.println("Establishing Connection");
                    con = new DesignHome().dbconn();
                    con.setAutoCommit(false);
                    System.out.println("Connection Established");
                    
                    String query = "Select * from users where username like '%" + userdetails + "%' or id = '" + userdetails + "' order by id asc";

                    System.out.println("Creating Statement");
                    stmt = con.createStatement();

                    rs = stmt.executeQuery(query);

                    t1.setModel(DbUtils.resultSetToTableModel(rs));
                    System.out.println("Executed Statement");

                    try
                    {
                    stmt.close();
                    con.close();
                    }
                    catch(SQLException e)
                    {
                    JOptionPane.showMessageDialog(null, e.getMessage());
                    }
                }
            }
            catch(SQLException e)
            {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }

        }
            
    }
    
    public void logout()
    {
        try
        {
        String uid = "";
            con = new DesignHome().dbconn();
            String que = "Select userid, sno from ActivityLog order by Sno desc limit 1";
            stmt = con.createStatement();
            rs = stmt.executeQuery(que);
            int sno = 0;
            while(rs.next())
            {
                uid = rs.getString(1);
                sno = rs.getInt(2);
            }

            System.out.println("UserID = " + uid);
            
            String query = "update ActivityLog set logout = ? where sno = '" + sno + "';";
            pstmt = con.prepareStatement(query);

            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
            java.util.Date date = new java.util.Date();
            sdf.format(date);
            String datetime = date.toString();

            pstmt.setString(1, datetime);
            pstmt.executeUpdate();
            
            stmt.close();
            pstmt.close();
            rs.close();
            con.close();
            
            new Home().setVisible(true);
            this.dispose();
        }
    
        catch(SQLException e)
        {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ApproveUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ApproveUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ApproveUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ApproveUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ApproveUser().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackBtn1;
    private javax.swing.JButton BackBtn2;
    private javax.swing.JLabel ClockLbl;
    private javax.swing.JLabel ClockLbl1;
    private javax.swing.JButton DeleteUserBtn;
    private javax.swing.JButton EditBtn;
    private javax.swing.JButton EditBtn1;
    private javax.swing.JLabel HeadingLbl;
    private javax.swing.JButton LogOutBtn;
    private javax.swing.JPanel MainCard;
    private javax.swing.JButton SearchUsersBtn;
    private javax.swing.JTextField UserDetTxt;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable t1;
    // End of variables declaration//GEN-END:variables
}
